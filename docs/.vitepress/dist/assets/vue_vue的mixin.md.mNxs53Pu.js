import{_ as a,c as e,o as i,a3 as t}from"./chunks/framework.COm4hYgr.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue的mixin.md","filePath":"vue/vue的mixin.md","lastUpdated":1714384646000}'),l={name:"vue/vue的mixin.md"},o=t('<h2 id="说说对mixin的理解-有什么场景" tabindex="-1">说说对mixin的理解，有什么场景 <a class="header-anchor" href="#说说对mixin的理解-有什么场景" aria-label="Permalink to &quot;说说对mixin的理解，有什么场景&quot;">​</a></h2><p>常用于功能复用，本质是一个对象，包括各种选项：data methods computed等 一个组件可以同时混入多个mixin</p><h3 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h3><ul><li>全局注册 <code>Vue.mixin({})</code>,一旦存在全局混入，将影响到所有的vue实例</li><li>局部注册 <code>mixins: [{}]</code></li></ul><h3 id="多个mixin合并策略" tabindex="-1">多个mixin合并策略 <a class="header-anchor" href="#多个mixin合并策略" aria-label="Permalink to &quot;多个mixin合并策略&quot;">​</a></h3><ul><li>替换</li><li>合并</li><li>队列</li></ul><h4 id="替换" tabindex="-1">替换 <a class="header-anchor" href="#替换" aria-label="Permalink to &quot;替换&quot;">​</a></h4><p>prop computed methods inject几个选项中同名的会被后来的直接替换,不同名的补充合并</p><h4 id="合并" tabindex="-1">合并 <a class="header-anchor" href="#合并" aria-label="Permalink to &quot;合并&quot;">​</a></h4><p>data 相同属性的对象会进行递归合并,添加不存在的属性，相同的对象属性递归合并，组件 &gt; mixin</p><h4 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h4><p>watch和声明周期函数，会添加到数组中，依此执行数组中的函数，组件内 〉 mixin</p><h4 id="叠加" tabindex="-1">叠加 <a class="header-anchor" href="#叠加" aria-label="Permalink to &quot;叠加&quot;">​</a></h4><h3 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h3><ul><li>分页表格的基本搜索、翻页的处理</li><li>弹框的显隐</li><li>地图的初始化、基础标点、几何图形等公共基础部分的处理</li></ul>',15),n=[o];function r(d,h,c,s,m,u){return i(),e("div",null,n)}const p=a(l,[["render",r]]);export{_ as __pageData,p as default};
