import{_ as l,c as e,o as i,a3 as t}from"./chunks/framework.B7tteqv2.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/事件模型.md","filePath":"js/事件模型.md","lastUpdated":1714909193000}'),o={name:"js/事件模型.md"},a=t('<h2 id="谈谈js中的事件模型" tabindex="-1">谈谈JS中的事件模型 <a class="header-anchor" href="#谈谈js中的事件模型" aria-label="Permalink to &quot;谈谈JS中的事件模型&quot;">​</a></h2><p>JS的事件，可以理解为在HTML文档或者浏览器发生的交互操作，使网页具备互动性</p><p>DOM是一个树结构，在父子节点绑定事件时，事件触发就存在顺序问题，就涉及了事件流</p><p><strong>事件流</strong> 三个阶段</p><ul><li>事件捕获阶段 capture：从最高层的父节点触发，自上而下传播，直到触发节点</li><li>处于目标阶段 target</li><li>事件冒泡阶段 bubble：从触发节点开始，自下而上传播，直到最高层的父节点</li></ul><p><strong>事件模型</strong> 事件模型可以分为三种</p><ol><li>原始事件模型(DOM0)</li></ol><ul><li>绑定比较简单，HTML中绑定:<code>onclick=&quot;func&quot;</code>,js中绑定:<code>domEl.onclick=fun</code></li><li>绑定速度快，可能页面还未完全加载，以至于事件可能无法正常运行</li><li>只支持冒泡，不支持捕获</li><li>同一个类型的事件只能绑定，重复绑定的话后面的绑定会覆盖前面的，比如同一个元素同类型事件绑定多个事件</li><li>解除绑定:<code>domEl.onclick=null</code>,将绑定事件置为null</li><li>兼容所有浏览器</li></ul><ol start="2"><li>标准事件模型(DOM2)</li></ol><ul><li>使用<code>el.addEventListener(eventType: click, handler, useCapture)</code>绑定事件</li><li>使用<code>el.removeEventListener(eventType: click, handler, useCapture)</code>解除绑定</li><li>useCapture默认为false，与IE浏览器保持一致，为冒泡, true为捕获，在捕获过程中执行</li><li>一个DOM上可以绑定多个事件处理器，不会冲突，按顺序执行</li><li>事件有三个阶段：事件捕获阶段、事件处理阶段、事件冒泡阶段：事件从document(目标元素)出发，向下(上)传播，检查经过的节点是否绑定了事件监听函数，如果有则执行</li><li>target:发生事件的节点，currentTarget:正在处理事件的节点，即当前绑定节点</li><li>clientX, clientY:鼠标相对于浏览器的x和y坐标</li><li>screenX, screenY:鼠标相对于显示器左上角的坐标</li><li>stopPropagation | preventDefault</li><li>同时定义DOM0和DOM2，彼此不会相互覆盖，但是DOM0之间会相互覆盖</li></ul><ol start="3"><li>IE事件模型(基本不用)</li></ol><ul><li>使用<code>el.attachEvent(evenType: onclick, handler)</code>绑定监听函数</li><li>使用<code>el.detachEvent(eventType, handler)</code>移除监听函数</li><li>事件有两个阶段：事件处理阶段、事件冒泡阶段</li><li>只支持IE浏览器</li><li>srcElement 兼容DOM2的target</li><li>cancelBubble false等同于DOM2的stopPropagation</li><li>returnValue false等同于DOM2的preventDefault</li></ul><ol start="3"><li>DOM3模型</li></ol><ul><li>在DOM2的基础上，支持更多的事件类型</li><li>load scroll blur focus dbclick mouseup mousewheel textinput keydown keypress DOMsubtreeModified compositionstart</li><li>允许自定义事件</li></ul><p>vue.js中template中的@click事件绑定是基于DOM2，内部实际是通过addEventListener实现绑定的 DOM1是DOM0的规范版本 DOM3是DOM2的扩展版本</p>',15),c=[a];function n(r,s,d,u,p,_){return i(),e("div",null,c)}const m=l(o,[["render",n]]);export{M as __pageData,m as default};
