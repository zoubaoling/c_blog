import{_ as i,c as l,o as e,a3 as o}from"./chunks/framework.COm4hYgr.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"http/浏览器缓存策略.md","filePath":"http/浏览器缓存策略.md","lastUpdated":1715169354000}'),a={name:"http/浏览器缓存策略.md"},t=o('<h2 id="浏览器缓存策略" tabindex="-1">浏览器缓存策略 <a class="header-anchor" href="#浏览器缓存策略" aria-label="Permalink to &quot;浏览器缓存策略&quot;">​</a></h2><p>类型：</p><ol><li>强制缓存/本地缓存：通过设置 Cache-Control 和 Expires 等响应头实现，可以让浏览器直接从本地缓存中读取资源而不发起请求。</li><li>协商缓存/弱缓存：通过设置 Last-Modified 和 ETag 等响应头实现，可以让浏览器发送条件请求，询问服务器是否有更新的资源。如果服务器返回 304 Not Modified 响应，则表示客户端本地缓存仍然有效，可直接使用缓存的资源。</li><li>Service Worker 缓存：Service Worker 是一种特殊的 JS 脚本，可以拦截网络请求并返回缓存的响应，以实现离线访问和更快的加载速度等功能。</li><li>Web Storage缓存：包括 localStorage 和 sessionStorage。localStorage 用于存储用户在网站上的永久性数据，而 sessionStorage 则用于存储用户会话过程中的临时数据</li></ol><p>优先级： Service Worker &gt; 强缓存 &gt; 协商缓存 &gt; Web Storage</p><ol><li>Service Worker 缓存：由于其可以完全控制网络请求，因此具有最高的优先级，即使是强制缓存也可以被它所覆盖。</li><li>强制缓存：如果存在强制缓存，并且缓存没有过期，则直接使用缓存，不需要向服务器发送请求。</li><li>协商缓存：如果强制缓存未命中，但协商缓存可用，则会向服务器发送条件请求，询问资源是否更新。如果服务器返回 304 Not Modified 响应，则直接使用缓存。</li><li>Web Storage 缓存：Web Storage 缓存的优先级最低，只有在网络不可用或者其他缓存都未命中时才会生效。</li></ol><p>浏览器缓存优点：</p><ol><li>减少重复数据请求，避免通过网络再次加载资源，节省流量。</li><li>降低服务器的压力，提升网站性能。</li><li>加快客户端加载网页的速度， 提升用户体验</li></ol><h3 id="强缓存和协商缓存" tabindex="-1">强缓存和协商缓存 <a class="header-anchor" href="#强缓存和协商缓存" aria-label="Permalink to &quot;强缓存和协商缓存&quot;">​</a></h3><p>强缓：不发起请求，直接使用缓存里的内容，浏览器把JS，CSS，image等存到内存中，下次用户访问直接从内存中取，提高性能 from memory|dist 协缓：需要像后台发请求，通过判断来决定是否使用协商缓存，如果请求内容没有变化，则返回304，浏览器就用缓存里的内容</p><p>请求流程：缓存都是从第二次请求开始</p><ol><li>根据响应信息中的expires和cache-control来判断是否命中缓存，如果命中，直接从缓存中获取资源</li><li>如果没有命中缓存，发送请求到服务器，会带上IF-Modified-Since(Last-Modified)和IF-None-Match(ETag)，服务器比对是否命中 <ol><li>命中就返回304，浏览器从缓存中获取资源</li><li>否则会返回实际资源内容，并更新相关字段Last-Modified ETag</li></ol></li></ol><h4 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h4><blockquote><p>根据Expires和Cache-Control控制，表示缓存的有效时间; Cache-Control &gt; Expires</p></blockquote><ol><li>Expires: http1.0</li></ol><ul><li>资源的失效时间，绝对时间</li><li>如果服务器和客户端时间偏差比较大，会混乱</li></ul><ol start="2"><li>Cache-Control: http1.1</li></ol><ul><li>max-age: 常l相对时间，资源的有效期，eg: 3600(s); 响应头会有Date,消息的发送时间</li><li>no-cache: 不使用强缓存，需要使用协商缓存</li><li>no-store: 禁止浏览器缓存，每次都需要想服务器请求</li><li>public: 可以被所有用户缓存</li></ul><h4 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h4><blockquote><p>服务器判断缓存资源是否可用，根据IF-Modified-Since/Last-Modified | IF-None-Match/ETag 判断</p></blockquote><ol><li>IF-Modified-Since/Last-Modified: http1.0</li></ol><ul><li>都是时间字符串, Last-Modified标记文件最后修改时间，下次请求会将此值带入IF-Modified-Since,服务器根据时间来比对。</li><li>没有变更返回304，不返回资源内容；有变更返回资源内容，更新Last-Modified</li></ul><ol start="2"><li>IF-None-Match/ETag: http1.1</li></ol><ul><li>是服务器给每个资源生成的唯一标识串，资源变化值就会变化</li><li>ETag的值在下次请求时会代入IF-None-Match,服务器比对，即时304，也会将ETag返回</li></ul><p>ETag 替换 Last-Modified的原因</p><ol><li>文件修改时间变了，但是内容可能没变，不希望客户端认为资源修改了</li><li>文件修改比较频繁可能在秒以内，但是Last-Modified只能精确到秒</li><li>某些服务器不能精确得到文件最后的修改时间</li></ol>',25),r=[t];function d(c,s,n,h,p,_){return e(),l("div",null,r)}const S=i(a,[["render",d]]);export{u as __pageData,S as default};
