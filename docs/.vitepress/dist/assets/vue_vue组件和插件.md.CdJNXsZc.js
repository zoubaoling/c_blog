import{_ as e,c as a,o as l,a3 as t}from"./chunks/framework.COm4hYgr.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue组件和插件.md","filePath":"vue/vue组件和插件.md","lastUpdated":1714384646000}'),o={name:"vue/vue组件和插件.md"},i=t('<h2 id="vue中组件和插件有什么区别" tabindex="-1">Vue中组件和插件有什么区别 <a class="header-anchor" href="#vue中组件和插件有什么区别" aria-label="Permalink to &quot;Vue中组件和插件有什么区别&quot;">​</a></h2><p>组件：由图形和非图形的逻辑组合在一起开发，以.vue格式结尾的文件都可以看作一个组件 插件：插件通常用于给vue添加全局功能，功能范围一般没有限制，比如：添加全局资源-指令、过滤器 ，添加全局混入、方法或属性等 组件主要是实现业务功能，目标是App.vue，插件主要是功能模块，对vue功能的增强和补充</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li>编写方式</li><li>注册方式</li><li>使用场景</li></ul><h4 id="编写方式" tabindex="-1">编写方式 <a class="header-anchor" href="#编写方式" aria-label="Permalink to &quot;编写方式&quot;">​</a></h4><ol><li>组件 组件主要以.vue结尾，内容包括template script style，由图形和非图形逻辑组成</li><li>插件 插件由一个包括install方法的对象实现，install方法接受两个参数，第一个为vue实例，第二个参数是配置对象</li></ol><h4 id="注册方式" tabindex="-1">注册方式 <a class="header-anchor" href="#注册方式" aria-label="Permalink to &quot;注册方式&quot;">​</a></h4><ol><li>全局注册</li></ol><ul><li>组件的全局注册是<code>Vue.component(&#39;&#39;)</code>或<code>app.component()</code></li><li>插件的全局注册是<code>Vue.use()</code>或<code>app.use()</code>，重复注册也只会注册一次,vue会自动阻止后续的注册</li></ul><ol start="2"><li>局部注册 vue2和vue3选项式写法中在选项components中注册，vue3 setup模式导入后可以直接使用</li></ol><ul><li>[] VUE如何判断插件注册过 -- plugins列表为weakSet 保持唯一，且key为引用类型：plugin（use的第一个参数）</li></ul>',11),u=[i];function r(s,n,c,d,_,p){return l(),a("div",null,u)}const m=e(o,[["render",r]]);export{v as __pageData,m as default};
