import{_ as i,c as a,o as s,a3 as l}from"./chunks/framework.BmlUaO9n.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/Vue常用的修饰符有哪些有什么应用场景.md","filePath":"vue/Vue常用的修饰符有哪些有什么应用场景.md","lastUpdated":1714384646000}'),t={name:"vue/Vue常用的修饰符有哪些有什么应用场景.md"},e=l(`<h2 id="vue常用的修饰符有哪些有什么应用场景" tabindex="-1">Vue常用的修饰符有哪些有什么应用场景 <a class="header-anchor" href="#vue常用的修饰符有哪些有什么应用场景" aria-label="Permalink to &quot;Vue常用的修饰符有哪些有什么应用场景&quot;">​</a></h2><h3 id="修饰符类型" tabindex="-1">修饰符类型 <a class="header-anchor" href="#修饰符类型" aria-label="Permalink to &quot;修饰符类型&quot;">​</a></h3><ul><li>表单修饰符</li><li>事件修饰符</li><li>鼠标按键修饰符</li><li>键盘修饰符</li><li>v-bind修饰符</li></ul><h4 id="表单修饰符" tabindex="-1">表单修饰符 <a class="header-anchor" href="#表单修饰符" aria-label="Permalink to &quot;表单修饰符&quot;">​</a></h4><ul><li>lazy</li><li>number</li><li>trim</li></ul><ol><li><p>lazy 默认情况下，v-model会在input事件后更新数据，使用.lazy可以在每次change后更新数据</p></li><li><p>number 将用户的输入自动转换为数字，如果不能通过parseFloat处理，那么返回原始值。type = number时，会自动启用number修饰符</p></li><li><p>trim 会去掉用户输入收尾的空格，中间的空格不会删除</p></li></ol><h4 id="事件修饰符" tabindex="-1">事件修饰符 <a class="header-anchor" href="#事件修饰符" aria-label="Permalink to &quot;事件修饰符&quot;">​</a></h4><p>修饰符可以链式使用</p><ul><li><p>.stop 阻止事件冒泡，event.stopPropagation</p></li><li><p>.prevent 阻止事件默认行为，event.preventDefault，比如：点击事件、表单提交事件、键盘事件等</p><ul><li>点击事件：点击a标签、按钮点击事件等，可以阻止链接跳转或按钮的默认提交行为</li><li>表单提交事件：当用户提交表单时（type为submit的input或者button），浏览器会执行默认提交行为，刷新页面或发送表单数据到服务器</li><li>键盘事件：鼠标右键会显示菜单，可以阻止并自定义右键菜单；如果焦点在表单元素上（input textarea），敲击键盘会自动输入，可以阻止过滤数据输入</li></ul><blockquote><p>preventDefault只会阻止默认行为，而不会阻止事件传播。事件处理函数中返回false也可以阻止默认行为，但是只对DOM0级模型有效（直接在元素上通过onClick等形式绑定事件处理）</p></blockquote></li><li><p>.self 只有当event.target是当前自身元素触发事件，注意顺序</p><ul><li>.prevent.self 会阻止所有点击</li><li>.self.prevent 会阻止元素自身的点击</li></ul></li><li><p>.once 绑定事件后只触发一次，第二次不会出发</p></li><li><p>.capture 使用捕获模式，从这个元素出发，自上而下触发</p></li></ul><h4 id="鼠标按键修饰符" tabindex="-1">鼠标按键修饰符 <a class="header-anchor" href="#鼠标按键修饰符" aria-label="Permalink to &quot;鼠标按键修饰符&quot;">​</a></h4><ul><li>.left 左键点击</li><li>.right 右键点击</li><li>.middle 中键点击</li></ul><h4 id="键盘修饰符" tabindex="-1">键盘修饰符 <a class="header-anchor" href="#键盘修饰符" aria-label="Permalink to &quot;键盘修饰符&quot;">​</a></h4><p>用来修饰键盘事件（onKeyup, onKeydown）的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @keyup.keycode=&quot;doSomething&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>keycode有很多种，vue提供了一些通用别名</p><ul><li>普通键: enter up delete esc tab space</li><li>系统键： ctrl shift alt meta</li></ul><h4 id="v-bind修饰符" tabindex="-1">v-bind修饰符 <a class="header-anchor" href="#v-bind修饰符" aria-label="Permalink to &quot;v-bind修饰符&quot;">​</a></h4><ul><li>.sync</li><li>.prop</li><li>.camel</li></ul><h4 id="sync" tabindex="-1">.sync <a class="header-anchor" href="#sync" aria-label="Permalink to &quot;.sync&quot;">​</a></h4><p>.sync可以对props进行双向绑定</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Father.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">com</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> :propName.sync=&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Child.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update:propName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value)</span></span></code></pre></div><p>相当于下面的简写</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Father.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">com</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> :propName.sync=&quot;bar&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @update:propName=&quot;doBar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doBar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Child.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update:propName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value)</span></span></code></pre></div><ol><li>使用.sync时，子组件事件必须使用update:value的形式，value必须与子组件中props中声明的名称一致</li><li>使用.sync的v-bind不能和表达式一起</li><li>v-bind.sync使用在字面量上是无效的：v-bind=&quot;{ age: 18 }&quot;</li></ol>`,24),n=[e];function p(h,r,o,k,d,c){return s(),a("div",null,n)}const y=i(t,[["render",p]]);export{g as __pageData,y as default};
