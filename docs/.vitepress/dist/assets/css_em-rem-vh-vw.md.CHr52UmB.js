import{_ as l,c as e,o as i,a3 as t}from"./chunks/framework.BmlUaO9n.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"css/em-rem-vh-vw.md","filePath":"css/em-rem-vh-vw.md","lastUpdated":1715052071000}'),a={name:"css/em-rem-vh-vw.md"},o=t('<h2 id="说说em-px-rem-vh-vw" tabindex="-1">说说em/px/rem/vh/vw <a class="header-anchor" href="#说说em-px-rem-vh-vw" aria-label="Permalink to &quot;说说em/px/rem/vh/vw&quot;">​</a></h2><ul><li>相对单位 <ul><li>em/px/rem/vh/vw/%/vmin/vmax</li></ul></li><li>绝对单位 <ul><li>px pt</li></ul></li></ul><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ol><li>px</li></ol><ul><li>是像素，显示器上给我们呈现的画面，每个像素单位大小一样，绝对单位长度</li></ul><ol start="2"><li>em</li></ol><ul><li>相对单位长度，相对于父级元素尺寸大小,不固定。如果父级元素font-size=32px; 1em --&gt;&gt; 32px</li><li>如果父级元素（祖先元素）没有设置字体大小，则相对于浏览器的默认字体尺寸：1em = 16px</li><li>16px * 62.5% = 10px, 方便计算可以声明font-size: 62.5%</li><li>存在级联性，会去查找最近的设置了字体大小的祖先元素，直到根元素</li></ul><ol start="3"><li>rem</li></ol><ul><li>相对单位长度，相对于根元素html的font-size来计算大小，通常用于移动端适配</li><li>16px * 62.5% = 10px, 方便计算可以声明html: font-size: 62.5% &gt; 1.5rem = 10 * 1.5</li><li>与em相比，rem是相对于根元素，而em使用级联的方式，寻找最近的设置了font-size的祖先元素</li></ul><ol start="4"><li>vm vh</li></ol><ul><li>以窗口大小为基础计算，分成100等分，100vw就是满宽,vh则为高度</li><li>PC端，窗口指浏览器的可视区域；移动端，窗口指的是布局视口</li><li>window.innerWidth &amp; window.innerHeight</li></ul><ol start="5"><li>%</li></ol><ul><li>相对于父元素</li><li>普通元素: 父元素; absolute: 相对于已定位的父元素; fixed: 相对于可视窗口ViewPort</li></ul>',13),r=[o];function m(s,n,h,p,_,c){return i(),e("div",null,r)}const v=l(a,[["render",m]]);export{d as __pageData,v as default};
