import{_ as a,c as i,o as e,a3 as t}from"./chunks/framework.BmlUaO9n.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/组合式API和选项式API.md","filePath":"vue/组合式API和选项式API.md","lastUpdated":1714298906000}'),l={name:"vue/组合式API和选项式API.md"},o=t('<h2 id="组合式api-vs-选项式api" tabindex="-1">组合式API VS 选项式API <a class="header-anchor" href="#组合式api-vs-选项式api" aria-label="Permalink to &quot;组合式API VS 选项式API&quot;">​</a></h2><h3 id="选项式api" tabindex="-1">选项式API <a class="header-anchor" href="#选项式api" aria-label="Permalink to &quot;选项式API&quot;">​</a></h3><p>选项式API即Option API，通过定义data computed methods watch等属性和方法处理页面逻辑，用组件的选项来组织逻辑 当逻辑复杂时，对应的属性列表会很长，难以阅读和理解</p><h3 id="组合式api" tabindex="-1">组合式API <a class="header-anchor" href="#组合式api" aria-label="Permalink to &quot;组合式API&quot;">​</a></h3><p>composition API，组件根据逻辑组织逻辑，一个功能的逻辑代码都在一起（高内聚、低耦合），可以快速定位</p><h3 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h3><ul><li>逻辑组织</li></ul><ol><li>选项式API中一个功能的代码分散在各个选项中，大型组件中，关注单个逻辑点时，需要在各选项中进行跳转</li><li>组合是API中一个功能的代码在一个函数中，关注单个逻辑点时，不需要来回跳转，也可以很轻松的移到外部文件中，方便重构和长期维护</li></ol><ul><li>逻辑复用</li></ul><ol><li>选项式API中可以使用mixin来进行复用，当引入多个mixin时，会出现命名冲突、变量来源不清楚的问题</li><li>使用hook函数进行编写复用函数，可以清晰的知道变量的来源</li></ol><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li>逻辑组织和逻辑复用方面，组合式API优于选项式API</li><li>组合式API中见不到this的使用，减少了this指向不明的情况</li><li>小型组件，仍然可以继续使用选项式API，比较友好</li><li>组合式API中，逻辑在函数内部，对tree-shaking更友好，未使用的函数更好被识别</li><li>组合式API函数编写，有更好的类型推断</li><li>更小的生产包体积，script setup形式的组件模版被编译成了一个内联函数，和script setup同一作用域，不用通过this上下文访问属性，而是直接访问script中的变量，无需从实例中代理。对代码压缩更友好：本地变量名字可以压缩，但是对象的属性名不能 <a href="https://vue3js.cn/interview/vue3/composition.html#%E6%AD%A3%E6%96%87" target="_blank" rel="noreferrer">解析参考</a></li></ul><blockquote><p>压缩工具只会对局部变量和函数名进行压缩，而不会对对象的属性名进行压缩，为了确保代码的正常运行和可读性</p></blockquote><ul><li>对象的属性名一般是运行时动态确定的，压缩工具无法确定哪些属性会被访问</li><li>对象的属性一般通过点运算符和方括号访问，压缩工具无法简单的对属性名进行压缩而不影响代码的正常运行</li></ul>',14),r=[o];function s(n,h,c,P,p,_){return e(),i("div",null,r)}const A=a(l,[["render",s]]);export{u as __pageData,A as default};
