import{_ as l,c as i,o as s,a5 as e}from"./chunks/framework.B102yH4G.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"html/async和defer.md","filePath":"html/async和defer.md","lastUpdated":1715839678000}'),a={name:"html/async和defer.md"},t=e('<h2 id="async-和-defer" tabindex="-1">async 和 defer <a class="header-anchor" href="#async-和-defer" aria-label="Permalink to &quot;async 和 defer&quot;">​</a></h2><p>当没有async和defer这两个属性的时候，会阻塞渲染</p><ul><li>浏览器会立刻加载并执行指定的脚本</li><li>加载和执行会阻塞HTML解析，直到脚本下载并执行完</li><li>和css并行加载，执行会阻塞css解析，JS可能修改CSSOM和DOM</li></ul><p>添加异步属性时</p><ul><li>async <ul><li>加载：和HTML解析、css下载并行进行（异步），不相互阻塞</li><li>执行：加载完立即执行，执行会阻塞HTML解析和CSS解析</li><li>执行顺序：谁先加载完先执行，与文档中顺序可能不一致，执行可能再CSS处理的前中后，取决于下载速度</li></ul></li><li>defer <ul><li>加载：和HTML解析、css下载并行进行（异步），不相互阻塞</li><li>执行：所有HTML解析完成后，在 DOMContentLoaded 事件前执行</li><li>执行顺序：按在文档中出现的顺序执行</li></ul></li></ul><hr><h3 id="html解析、css、script" tabindex="-1">html解析、css、script <a class="header-anchor" href="#html解析、css、script" aria-label="Permalink to &quot;html解析、css、script&quot;">​</a></h3><ol><li>css js等脚本的下载是并行的，无论脚本是否配置异步，下载不会相互阻塞</li><li>css的下载不阻塞html的解析，是并行的，但是css的执行会</li></ol><ul><li>阻塞后续渲染，但不会直接阻塞HTML的解析，HTML会继续解析，并构建DOM，只是会在CSSOM构建完成再渲染</li><li>会阻塞后续js的执行，js可能依赖于CSSOM内容</li></ul><ol start="3"><li>script下载和执行会阻塞HTML解析，直到脚本下载并执行完</li><li>script执行会阻塞后续资源的处理，包括css解析，因为JS可能会修改CSSOM和DOM</li></ol><h3 id="最佳实践-link标签要放在script前" tabindex="-1">最佳实践：link标签要放在script前 <a class="header-anchor" href="#最佳实践-link标签要放在script前" aria-label="Permalink to &quot;最佳实践：link标签要放在script前&quot;">​</a></h3><ul><li>先加载CSS，确保JS执行前，样式已经就位，避免JS操作DOM时无样式内容，减少渲染过程的闪烁或者样式跳变</li><li>避免JS阻塞CSS解析和渲染，提高加载性能，JS可能修改DOM和CSSOM，所以执行会阻塞后续资源的下载和处理</li></ul>',12),c=[t];function r(n,o,d,h,S,_){return s(),i("div",null,c)}const f=l(a,[["render",r]]);export{u as __pageData,f as default};
