import{_ as s,c as i,o as a,a3 as l}from"./chunks/framework.B7tteqv2.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack常见的loader&解决问题.md","filePath":"webpack/webpack常见的loader&解决问题.md","lastUpdated":1715657339000}'),e={name:"webpack/webpack常见的loader&解决问题.md"},t=l(`<h2 id="说说webpack中常见的loader-解决了什么问题" tabindex="-1">说说webpack中常见的Loader？解决了什么问题 <a class="header-anchor" href="#说说webpack中常见的loader-解决了什么问题" aria-label="Permalink to &quot;说说webpack中常见的Loader？解决了什么问题&quot;">​</a></h2><blockquote><p>webpack只认识js和json文件，像css|less|png等文件，在import时loader会对这些文件进行转换翻译使得webpack能继续处理。所以任何文件都可以看作模块</p></blockquote><p><strong>配置</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, use: [ { loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } ]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>特性</strong></p><ol><li>链式调用，loader会处理之前已经处理过的资源。执行顺序为从右向左、从下向上</li><li>可以同步，也可以是异步</li><li>plugin可以为Loader带来更多的特性</li><li>运行在NodeJS中</li><li>转换和预处理功能：ts &gt; js; sass/scss &gt; css</li><li>非JS文件模块化</li></ol><h3 id="常见的loader" tabindex="-1">常见的loader <a class="header-anchor" href="#常见的loader" aria-label="Permalink to &quot;常见的loader&quot;">​</a></h3><ul><li>style-loader: 将css通过注入style标签添加到DOM，结合css-loader，将其生成的内容，用style挂载到head中</li><li>css-loader :解析CSS文件中@import和url()为import/require() 方式，解析它们所依赖的资源并合并成一个CSS</li><li>less-loader: less &gt; css</li><li>sass-loader: sass &gt; css</li><li>postcss-loader: 用postcss来处理CSS,自动化添加浏览器前缀(plugin: autoprefixer)、使用最新的CSS语法（转换向下兼容）(plugin: postcss-plugin-env)、优化压缩(plugin: cassnano) <ul><li>结合各种插件:postcss.config.js postcss-loader&gt;options&gt;postcssOptions&gt;plugins</li></ul></li><li>file-loader: 把识别出的资源模块(图片、字体)，移动到指定的输出⽬目录，并返回这输出目录的地址(字符串)</li><li>url-loader: 可以做file-loader所有事情，但是可以设置文件limit大小限制，小于限制可以转成base64格式的字符串并打包到JS中（1M: 1024 * 1024）</li><li>babel-loader: ES6+ 的代码转换成向后兼容的JS代码，兼容旧的浏览器或环境</li><li>html-minify-loader: 压缩HTML</li></ul>`,8),n=[t];function p(o,r,h,d,k,c){return a(),i("div",null,n)}const _=s(e,[["render",p]]);export{E as __pageData,_ as default};
