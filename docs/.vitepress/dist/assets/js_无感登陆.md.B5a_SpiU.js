import{_ as e,c as t,o,a3 as l}from"./chunks/framework.BmlUaO9n.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/无感登陆.md","filePath":"js/无感登陆.md","lastUpdated":1715169354000}'),i={name:"js/无感登陆.md"},n=l('<h2 id="有没有做过无感登录" tabindex="-1">有没有做过无感登录？ <a class="header-anchor" href="#有没有做过无感登录" aria-label="Permalink to &quot;有没有做过无感登录？&quot;">​</a></h2><p><strong>流程：</strong></p><ol><li>用户首次登陆，输入用户名和密码，服务端验证并生成长期有效令牌jwt返回</li><li>客户端接收令牌并存储（cookie）</li><li>再次访问携带令牌，服务器判断有效性，有效就不需要输入密码</li></ol><p>令牌需要定期更新保持安全性</p><p><strong>实现</strong> token刷新时机：</p><ol><li>在响应器中拦截，判断token返回过期后，调用刷新token的接口</li><li>后端返回过期时间，前端判断token的过期时间，去调用刷新token的接口</li><li>写定时器，定时刷新token接口</li></ol><p>实现流程：</p><ol><li>登录成功后保存token(访问令牌) 和 refresh_token(刷新令牌)</li><li>在响应拦截器中对401状态码调用刷新token的api方法</li><li>替换保存本地新的token</li><li>把错误对象里的token替换</li><li>再次发送未完成的请求</li><li>如果refresh_token过期了，判断是否过期，过期了就清楚所有token重新登录</li></ol><ul><li>访问令牌需要频繁的在客户端和服务器之间传输，有效期较短可以减少令牌被窃取的情况</li><li>即使访问令牌被获取了，有效期过后无法使用，也无法获取新的访问令牌，因为没有刷新令牌</li></ul>',9),a=[n];function s(_,r,c,p,d,k){return o(),t("div",null,a)}const m=e(i,[["render",s]]);export{f as __pageData,m as default};
