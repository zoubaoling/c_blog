import{_ as l,c as e,o as t,a3 as o}from"./chunks/framework.COm4hYgr.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/js的数据类型.md","filePath":"js/js的数据类型.md","lastUpdated":1714650100000}'),i={name:"js/js的数据类型.md"},d=o('<h2 id="说说javascript中的数据类型-存储上的差别" tabindex="-1">说说JavaScript中的数据类型？存储上的差别？ <a class="header-anchor" href="#说说javascript中的数据类型-存储上的差别" aria-label="Permalink to &quot;说说JavaScript中的数据类型？存储上的差别？&quot;">​</a></h2><ul><li>基本类型</li><li>引用类型 基本类型和引用类型的区别主要是存储位置不同</li></ul><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h3><ul><li>String: &quot;双引号 &#39;单引号 `反引号</li><li>Number: 包括整数和浮点数 <ul><li>存在一个特殊数值<code>NaN</code>,不是数值，表示本来要返回数值的操作失败了</li></ul></li><li>Boolean: 布尔值，可以通过<code>Boolean</code>将其他数据转换成布尔型 <ul><li>可以转为false的：&#39;&#39;, undefined, null, 0, -0, +0, NaN</li></ul></li></ul><table><thead><tr><th>数据类型</th><th>转为false</th><th>转为true</th></tr></thead><tbody><tr><td>String</td><td>&#39;&#39;(不能含空格)</td><td>非空字符串</td></tr><tr><td>Number</td><td>(+-)0,NaN</td><td>非0数值，包括无穷数值</td></tr><tr><td>Object</td><td>null</td><td>任意对象</td></tr><tr><td>Undefined</td><td>undefined</td><td>-</td></tr></tbody></table><ul><li>Undefined: 特殊值，声明了变量但未初始化值就是undefined</li><li>null: 特殊值，空值，一个空对象指针 <ul><li>是一个空对象指针，typeof null === &#39;object&#39;</li><li>undefined由null派生，所以==结果为true，严格判断为false</li><li>当变量要保存一个变量，但是当时没那个变量可以保存，就可以用<code>null</code>来填充</li></ul></li><li>Symbol：唯一标识符，用于对象属性的键名,不可变 <ul><li>Symbol不能用作构造函数</li><li>Symbol()中即使传递相同的内容也是不同的值</li><li>全局注册Symbol.for(key)，根据符号去找，如果注册过就返回对应symbol，如果没有就注册并返回</li><li>Symbol.keyFor(symbol)，查询全局注册表，传入symbol值，查找对应的key,只能查找通过Symbol.for注册的，否则会报错</li></ul></li></ul><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h3><p>统称为<code>Object</code>,常见的是：<code>Object</code> <code>Array</code> <code>Function</code> 还有<code>Date</code>, <code>Map</code>, <code>Set</code>, <code>RegExp</code></p><p><strong>创建方式</strong></p><ul><li>Object <ol><li>对象字面量：<code>const obj = {}</code></li><li>构造函数，也可以包括类: <code>const p = new Person()</code></li><li>Object.create(), 指定原型对象创建对象</li></ol></li><li>Array <ol><li>数组字面量：<code>const arr = []</code></li><li>Array构造函数：<code>const arr = new Array(1, 2, 3)</code></li><li>Array.from: 从类数组和可迭代对象创建数组</li><li>扩展运算符，同Array.from</li></ol></li><li>Function <ol><li>函数声明：function关键字<code>function fun(){}</code></li><li>函数表达式：函数赋值给变量<code>const myFun = function(){}</code></li><li>箭头函数</li></ol></li></ul><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li><p>基础类型存储在栈中，存放的是值</p></li><li><p>引用类型数据存储在堆中，栈中存储的是指向堆内存的引用地址</p></li><li><p>简单类型赋值是复制了一份值并在栈中开辟内存存储值</p></li><li><p>引用类型复制是复制了一份引用地址并在栈中开辟内存存储引用地址，复制前后的对象的地址指向的是堆中的同一个对象</p></li></ul>',12),a=[d];function r(c,n,s,u,h,p){return t(),e("div",null,a)}const f=l(i,[["render",r]]);export{b as __pageData,f as default};
