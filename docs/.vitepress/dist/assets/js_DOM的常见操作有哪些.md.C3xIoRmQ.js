import{_ as e,c as l,o as t,a3 as i}from"./chunks/framework.COm4hYgr.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/DOM的常见操作有哪些.md","filePath":"js/DOM的常见操作有哪些.md","lastUpdated":1714909193000}'),o={name:"js/DOM的常见操作有哪些.md"},a=i('<h2 id="dom的常见操作有哪些" tabindex="-1">DOM的常见操作有哪些 <a class="header-anchor" href="#dom的常见操作有哪些" aria-label="Permalink to &quot;DOM的常见操作有哪些&quot;">​</a></h2><h3 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h3><p>文档对象模型，是HTML和XML文档的编程接口, 提供了对文档的结构化表述，定义了一种方式可以从程序中对结构进行访问，并改变文档的结构，样式和内容</p><p>任何HTML文档都可以用DOM表示为一个有节点构成的层级结构</p><ul><li>元素节点</li><li>文本节点</li><li>属性节点</li><li>...</li></ul><h3 id="常见操作" tabindex="-1">常见操作 <a class="header-anchor" href="#常见操作" aria-label="Permalink to &quot;常见操作&quot;">​</a></h3><ul><li>创建节点 <ul><li>创建元素（元素标签名）<code>createElement(&#39;div&#39;)</code></li><li>创建文本节点 <code>createTextNode(&#39;content&#39;)</code></li><li>创建文档碎片，轻量级，存储临时节点，一次性添加到DOM<code>createDocumentFragment()</code>,插入的不是其本身，而是所有子孙节点</li><li>创建属性节点<code>createAtrribute(&#39;custom&#39;)</code></li></ul></li><li>查询节点 <ul><li>querySelector(.elment | #element | div | div + p &gt; span | [name=&quot;username&quot;])，无就返回null，有返回首个匹配元素</li><li>querySelectorAll，无返回空节点列表，有返回匹配element节点列表，静态快照，不是实时查询</li><li>getElementById: el, getElementsByClassName: NodeList, getElementsByTagName: NodeList, getElementsByName: NodeList</li><li>document.documentElement: HTML标签</li><li>document.body: body标签</li><li>parentNode &gt; el; firstChild | lastChild &gt; el; childNodes &gt; NodeList; previousSibling | nextSibling &gt; el</li></ul></li><li>更新节点 <ul><li>innerHTML</li><li>innerText textContent: 自动对字符串进行HTML编码，无法设置HTML标签；innerText不返回隐藏元素的文本，textContent返回所有文本</li><li>style: 元素的style对应所有css,可以直接获取或设置，<code>-</code>需要转换为驼峰命名: style.propertyName = value</li><li>setAttribute</li></ul></li><li>添加节点 <ul><li>innerHTML: 修改DOM节点的内容或替换DOM节点的内容<code>el.innterHTML=&#39;&lt;span&gt;&lt;/span&gt;&#39;</code></li><li>appendChild:子节点添加到父节点的最后一个子节点 <code>parent.appendChild(el)</code></li><li>insertBefore: 子节点插入到指定元素之前<code>parentElement.insertBefore(newEl, referenceElement)</code></li><li>setAttribute(attrname, value): 添加或修改节点属性</li></ul></li><li>删除节点 <ul><li>先获取要删除节点的父节点，调用父节点的方法删除自己: <code>self.parentElement.removeChild(self)</code>,返回删除的节点</li><li>删除指定的属性：<code>removeAttribute(attribute)</code></li></ul></li></ul>',7),n=[a];function d(r,c,s,u,m,_){return t(),l("div",null,n)}const M=e(o,[["render",d]]);export{h as __pageData,M as default};
