import{_ as i,c as s,o as a,a3 as l}from"./chunks/framework.BmlUaO9n.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack常见的plugin&解决问题.md","filePath":"webpack/webpack常见的plugin&解决问题.md","lastUpdated":1715657339000}'),n={name:"webpack/webpack常见的plugin&解决问题.md"},e=l(`<h2 id="说说webpack中常见的plugin-解决了什么问题" tabindex="-1">说说webpack中常见的Plugin？解决了什么问题 <a class="header-anchor" href="#说说webpack中常见的plugin-解决了什么问题" aria-label="Permalink to &quot;说说webpack中常见的Plugin？解决了什么问题&quot;">​</a></h2><blockquote><p>plugin赋予其各种灵活的功能，解决loader无法实现的其他事, 运行在webpack的不同阶段（钩子/生命周期），贯穿了webpack整个编译周期</p></blockquote><p><strong>解决的问题：</strong></p><ul><li>环境变量注入</li><li>代码分割</li><li>自动刷新和HMR</li><li>优化资源，打包优化</li><li>生成静态资源</li></ul><p>配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h3><ol><li><code>钩子系统</code>：Webpack提供了一个丰富的钩子系统，允许插件在构建过程的不同阶段介入，执行操作（如优化、定义变量等）</li><li><code>定制性和灵活性</code>：通过插件，可以定制和扩展Webpack的功能，包括但不限于加载、打包、输出等过程</li><li><code>自动化任务</code>：插件可以自动化许多构建相关的任务，提高效率，减少重复劳动</li></ol><h3 id="常见的plugin" tabindex="-1">常见的Plugin <a class="header-anchor" href="#常见的plugin" aria-label="Permalink to &quot;常见的Plugin&quot;">​</a></h3><ul><li>HtmlWebpackPlugin: 打包结束后，根据指定模版文件⾃动生成⼀个html文件，并把打包生成的js和CSS模块引⼊到html中---title filename template &lt;%=htmlWebpackPlugin.options.XXX%&gt;</li><li>clean-webpack-plugin: 每次构建前清理/删除构建文件夹，保证输出目录中只有用到的文件</li><li>mini-css-extract-plugin: 提取 CSS 到一个单独的文件中--MiniCssExtractPlugin.loader; new MiniCssExtractPlugin({ filename: &#39;[name].css&#39; })</li><li>copy-webpack-plugin: 复制文件或目录到构建目录-- from to globOptions.ignore; vue-cli中需要手动添加</li><li>DefinePlugin: 在编译时创建配置的全局对象，是一个webpack内置的插件，不需要安装--- new DefinePlugin({ BASE_URL: &#39;./&#39; }) &gt;&gt;&gt; <code>&lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL%&gt;favicon.ico&gt;&quot; /&gt;</code></li><li>terser-webpack-plugin: 压缩JS，移除无用代码。</li><li>optimize-css-assets-webpack-plugin: 优化和压缩CSS资源</li><li>HotModuleReplacementPlugin: HMR</li></ul><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>本质是一个包含apply方法的js对象，会被webpack compiler调用，整个编译声明周期都可以访问编译对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pluginName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ConsoleLogOnBuildWebpackPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConsoleLogOnBuildWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // hooks.entry-option|run|compile|compilation||after-compile|emit|after-emit|done|failed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.run.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pluginName, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack 构建过程开始！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConsoleLogOnBuildWebpackPlugin;</span></span></code></pre></div>`,13),p=[e];function t(h,k,o,c,r,d){return a(),s("div",null,p)}const u=i(n,[["render",t]]);export{E as __pageData,u as default};
