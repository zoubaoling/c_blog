import{_ as e,c as n,o as d,a3 as i}from"./chunks/framework.COm4hYgr.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/devDependencies和dependencies.md","filePath":"webpack/devDependencies和dependencies.md","lastUpdated":1715169354000}'),c={name:"webpack/devDependencies和dependencies.md"},s=i('<h2 id="package-json-文件中的-devdependencies-和-dependencies-对象有什么区别" tabindex="-1">package.json 文件中的 devDependencies 和 dependencies 对象有什么区别？ <a class="header-anchor" href="#package-json-文件中的-devdependencies-和-dependencies-对象有什么区别" aria-label="Permalink to &quot;package.json 文件中的 devDependencies 和 dependencies 对象有什么区别？&quot;">​</a></h2><p>都用于指定项目所依赖的软件包，但它们在项目的开发和生产环境中的使用有所不同。</p><ol><li>dependencies：</li></ol><ul><li>dependencies 是指定项目在生产环境中运行所需要的依赖项。</li><li>这些依赖项通常包括运行时需要的库、框架、工具等。</li><li>当通过 npm install安装依赖时，默认会安装 dependencies 中的包。</li><li>会被打包和部署到生产环境中，因此它们对于项目的运行是必需的。</li></ul><ol start="2"><li>devDependencies：</li></ol><ul><li>指定在开发过程中所需要的依赖项。</li><li>通常包括开发、测试、构建、部署等过程中所需的工具、库等。例如，测试框架、构建工具、代码检查工具等通常属于 devDependencies。</li><li>只在开发环境中安装。如果使用了 npm install --production 或设置了环境变量 NODE_ENV=production，则不会安装 devDependencies</li><li>这些依赖项不会被打包到生产环境中，因为它们只在开发过程中需要，对于实际部署和运行项目并不需要。</li></ul><blockquote><p>总的来说，dependencies 中的依赖项是项目运行所必需的，而 devDependencies 中的依赖项则是在开发过程中需要的辅助工具和</p></blockquote>',7),p=[s];function a(l,t,o,_,r,u){return d(),n("div",null,p)}const k=e(c,[["render",a]]);export{D as __pageData,k as default};
