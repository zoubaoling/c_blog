import{_ as l,c as i,o as e,a3 as a}from"./chunks/framework.BmlUaO9n.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/本地存储的方式.md","filePath":"js/本地存储的方式.md","lastUpdated":1714909193000}'),o={name:"js/本地存储的方式.md"},t=a('<h2 id="javascript本地存储的方式有哪些-区别及应用场景" tabindex="-1">Javascript本地存储的方式有哪些？区别及应用场景 <a class="header-anchor" href="#javascript本地存储的方式有哪些-区别及应用场景" aria-label="Permalink to &quot;Javascript本地存储的方式有哪些？区别及应用场景&quot;">​</a></h2><blockquote><p>cookie sessionStorage localStorage indexDB 1.cookie</p></blockquote><ul><li>H5标准前的本地存储方式</li><li>兼容性好，请求头自带cookie,解决HTTP无状态导致的问题</li><li>存储量小: 4KB，资源浪费，使用麻烦（封装）</li><li>属性：name value expires max-age domain path secure http-only <ul><li>expires: 过期时间</li><li>max-age: cookie失效前要经历的秒数，max-age优先级比expires高</li><li>path: 请求资源的路径必须包含此路径才能发送cookie首部</li><li>secure: 只能被HTTPS协议请求发送</li><li>http-only: JS无法操作</li></ul></li><li>处理: document.cookie=&#39;name1=1;name2=2;path=/&#39;，只能获取同域名数据 2.localstorage</li><li>H5加入的以键值对为标准的方式,IE8以上都兼容</li><li>操作方便，永久存储，兼容性较好，除非主动删除数据，否则数据永远不会过期,浏览器关闭也不会丢失</li><li>存储信息同域中共享，受同源策略的限制</li><li>存储量大小：5M，与浏览器厂商有关</li><li>本页操作localStorage，不会触发本页面的storage事件，别的页面会触发</li><li>本质上是对字符串的读取，如果存储内容过多会消耗内存空间，页面变卡</li><li>保存值的类型被限定，浏览器在隐私模式下不可读取，不能被爬虫</li><li>使用: <ul><li>localStorage.setItem(key,value)</li><li>localStorage.getItem(key)</li><li>localStorage.removeItem(key) | localStorage.clear()</li><li>localStorage.key(index): 获取键名</li></ul></li><li>无法设置过期时间，无法存入对象，只能存字符串 3.sessionstorage</li><li>与localStorage基本一致，只有生命周期不同</li><li>是会话式存储，一旦页面（会话）关闭，数据会删除</li><li>数据只在当前页面/tab存在，同域的不同页面数据也不共享 4.indexedDB</li><li>H5标准的存储方式，，他是以键值对进行存储，可以快速读取，适合WEB场景</li><li>同源，理论上大小无限制</li><li>异步操作，支持存储JS对象</li><li>操作繁琐</li></ul><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li>存储大小：cookie限制是4k, localStorage和sessionStorage是5M或更多</li><li>有效时间：localStorage是永久存储，浏览器关闭不丢失数据,除非主动删除; sessionStorage在窗口关闭后自动删除; cookie在max-age或者expires之前一致有效，即使浏览器或窗口关闭</li><li>与服务器之间的交互方式：cookie的数据会自动带到服务器，服务器也可以写cookie到客户端；sessionStorage和localStorage在本地存储，不会自动数据传输给服务器</li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li><p>与用户情况相关的可以使用cookie</p></li><li><p>需要长期保存在本地的数据（令牌），使用localStorage</p></li><li><p>敏感账号一次性登陆，使用sessionStorage</p></li><li><p>大量数据，在线文档（富文本编辑器）保存编辑历史的情况，使用indexDB</p></li><li><p>[ ] learn indexDB</p></li></ul>',7),r=[t];function s(c,n,p,_,d,u){return e(),i("div",null,r)}const m=l(o,[["render",s]]);export{h as __pageData,m as default};
