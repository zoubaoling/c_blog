import{_ as e,c as a,o as t,a5 as o}from"./chunks/framework.B102yH4G.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/JS中作用域链.md","filePath":"js/JS中作用域链.md","lastUpdated":1715864760000}'),c={name:"js/JS中作用域链.md"},s=o('<h3 id="作用域链-scope-chain" tabindex="-1">作用域链 scope chain <a class="header-anchor" href="#作用域链-scope-chain" aria-label="Permalink to &quot;作用域链 scope chain&quot;">​</a></h3><p>作用域就是词法作用域，由函数声明时所在的位置决定的，在编译阶段就产生的，一整套函数内标识符的访问规则</p><blockquote><p>并没有真实的变量，但是却定义了变量如何访问的规则</p></blockquote><ul><li>全局作用域，不在函数中或大括号中声明的变量，都在全局作用域下，全局作用域下的变量可以在任意位置访问</li><li>函数作用域，函数内声明的变量只能在函数内部访问</li><li>块级作用域，大括号中let const声明的变量存在于块级作用域中，不能在大括号外访问</li><li>词法作用域/静态作用域，变量创建时就确定好，非执行阶段确定</li></ul><h4 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h4><p>作用域链是一种用于查找变量和函数的机制，由当前执行环境中的变量对象和其父级执行上下文的变量对象组成</p><p>当代码在一个执行上下文中访问一个变量或者函数时，JS引擎会先在当前执行环境的变量对象中查找，找不到，会沿着作用域链向上一级的执行环境中查找，直到找到对应的变量或者函数，或者达到全局执行上下文为止，找不到会报错</p><p>作用域链的形成是由函数定义时的位置来决定的，而不是函数调用时的位置</p><p>作用域链 本质上是一个指向变量对象的指针列表，它只引用不包含实际变量对象。作用域链定义了当变量在当前上下文访问不到的时候如何沿作用域链继续查询的一套规则</p>',9),i=[s];function _(l,n,r,p,d,h){return t(),a("div",null,i)}const f=e(c,[["render",_]]);export{m as __pageData,f as default};
