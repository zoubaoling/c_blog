import{_ as e,c as i,o as a,a3 as l}from"./chunks/framework.COm4hYgr.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/字符串的常用方法.md","filePath":"js/字符串的常用方法.md","lastUpdated":1714650100000}'),t={name:"js/字符串的常用方法.md"},o=l('<h2 id="字符串的常用方法" tabindex="-1">字符串的常用方法 <a class="header-anchor" href="#字符串的常用方法" aria-label="Permalink to &quot;字符串的常用方法&quot;">​</a></h2><p>增、删、改、查、转换 字符创建后不会被更改</p><h3 id="增" tabindex="-1">增 <a class="header-anchor" href="#增" aria-label="Permalink to &quot;增&quot;">​</a></h3><p>不修改原字符串</p><ul><li><code>concat(...strings)</code>:将多个字符串拼接成一个新的字符串并返回</li></ul><h3 id="删" tabindex="-1">删 <a class="header-anchor" href="#删" aria-label="Permalink to &quot;删&quot;">​</a></h3><p>不修改原字符串</p><ul><li><p><code>slice(start, end)</code>, 截取指定区域的字符并返回创建一个副本</p></li><li><p><code>substring(start, end)</code>: 截取指定索引位置的字符并返回创建一个副本</p></li><li><p><code>substr</code>: deprecated</p><ol><li>如果第一个参数大于第二个参数，slice返回空字符串，substring会交换两个参数</li><li>如果参数是负数或者超出字符长度，substring会看作0，slice会从尾部开始</li></ol></li></ul><h3 id="改" tabindex="-1">改 <a class="header-anchor" href="#改" aria-label="Permalink to &quot;改&quot;">​</a></h3><p>不修改原字符串</p><ul><li><code>trim</code>, <code>trimStart</code>, <code>trimEnd</code>,删除前后、前、后空格</li><li><code>padStart(maxLength, fillString)</code>, <code>padEnd(maxLength, fillString)</code>, 在前、后填充指定字符至最大长度，默认空字符</li><li><code>repeat(count)</code>, 字符复制指定次数，返回新的字符</li><li><code>toLowerCase()</code>, <code>toUpperCase()</code>, 全大写、全小写</li></ul><h3 id="查" tabindex="-1">查 <a class="header-anchor" href="#查" aria-label="Permalink to &quot;查&quot;">​</a></h3><ul><li><code>startWith(searchString, position)</code>: 查找从指定位置开始，是否以某个字符开始，返回布尔值</li><li><code>includes(searchString, position)</code>: 查找从指定位置往后，是否包含某个字符，返回布尔值</li><li><code>indexOf(searchString, position)</code>: 查找从指定位置开始往后，第一次出现搜索字符的位置，没有返回-1</li><li><code>chartAt(position)</code>: 查找指定位置的字符</li></ul><h3 id="转换" tabindex="-1">转换 <a class="header-anchor" href="#转换" aria-label="Permalink to &quot;转换&quot;">​</a></h3><p>不修改原字符</p><ul><li><code>split(separator: string | RegExp, limit)</code>: 按照指定的分割符分割成数组 <ul><li>limit有值，返回前limit条数据</li><li>不传分割符，返回数组长度为1，元素是完整的字符</li><li>分割符为空字符串，则按字符挨个分割</li></ul></li></ul><h3 id="模版匹配方法" tabindex="-1">模版匹配方法 <a class="header-anchor" href="#模版匹配方法" aria-label="Permalink to &quot;模版匹配方法&quot;">​</a></h3><ul><li><code>match(正则表达式字符串｜RegExp)</code>: 返回数组[0]为匹配值，索引：index 0 input groups</li><li><code>search(正则表达式字符串｜RegExp)</code>: 查找指定内容出现的位置，没有-1</li><li><code>replace(string|RegExp, replaceValue)</code>: 指定内容替换为指定内容</li></ul>',18),c=[o];function r(d,s,n,h,p,u){return a(),i("div",null,c)}const g=e(t,[["render",r]]);export{m as __pageData,g as default};
