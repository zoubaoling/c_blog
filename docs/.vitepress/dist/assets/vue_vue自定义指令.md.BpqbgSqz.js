import{_ as i,c as s,o as a,a3 as e}from"./chunks/framework.BmlUaO9n.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue自定义指令.md","filePath":"vue/vue自定义指令.md","lastUpdated":1714384646000}'),l={name:"vue/vue自定义指令.md"},t=e(`<h2 id="你有写过自定义指令吗-自定义指令的应用场景有哪些" tabindex="-1">你有写过自定义指令吗？自定义指令的应用场景有哪些? <a class="header-anchor" href="#你有写过自定义指令吗-自定义指令的应用场景有哪些" aria-label="Permalink to &quot;你有写过自定义指令吗？自定义指令的应用场景有哪些?&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>以v-开头的行内属性都是指令，不同的指令可以实现不同的功能，可以实现功能复用，一般适用于涉及到需要修改底层DOM时使用</p><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><ul><li>v-directivename 直接使用，不传递值、参数、修饰符等</li><li>v-direct:arg 以冒号形式传递参数</li><li>v-direc.modify 以点运算符形式添加修饰符，支持多个</li><li>v-direct=&quot;&quot; 给指令赋值</li></ul><h4 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h4><ol><li>全局定义 vue2: Vue.directive</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>vue3: app.directive</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><ol start="2"><li>局部定义 vue2和vue3选项式模式: 在选项directives中声明</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  focus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>vue3 script setup模式时：以v开头的驼峰式变量</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vFocus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="定义形式" tabindex="-1">定义形式 <a class="header-anchor" href="#定义形式" aria-label="Permalink to &quot;定义形式&quot;">​</a></h4><ul><li>名称不包括v-前缀</li><li>定义时可以以包括生命周期钩子函数的对象形式，也可以是函数形式，只需要在<code>inserted</code>和<code>update</code>中执行行为时(vue2)；<code>mounted</code>和<code>updated</code>(vue3)</li></ul><h3 id="钩子函数" tabindex="-1">钩子函数 <a class="header-anchor" href="#钩子函数" aria-label="Permalink to &quot;钩子函数&quot;">​</a></h3><p>vue2: bind inserted update componentUpdate unbind vue3: created beforeMount mounted beforeUpdate updated beforeUnmount unmounted</p><p>vue2</p><ul><li>bind: 只调用一次，当指令绑定到元素时，可以进行初始化</li><li>inserted: 元素插入到父节点时调用（只保证插入到父节点中，不一定插入到文档流中）</li><li>update: 组件的<code>VNode</code>变化时调用，子组件的<code>VNode</code>可能没更新，可以比较前后值忽略不必要的更新</li><li>componentUpdate: 组件和子组件的<code>VNode</code>都更新完调用</li><li>unbind: 只调用一次，指令和元素解绑时调用</li></ul><p>vue3</p><ul><li>created: 绑定元素的属性前或事件监听器应用前调用</li><li>beforeMount: 元素插入到DOM前</li><li>mounted: 绑定元素的父组件和他自己的所有子组件挂载完调用</li><li>beforeUpdate: 绑定元素的父组件更新前</li><li>update: 绑定元素的父组件和其所有的子组件更新后调用</li><li>beforeUnmount: 绑定元素的父组件卸载前调用</li><li>unmounted: 绑定元素的父组件卸载后调用</li></ul><h4 id="钩子参数" tabindex="-1">钩子参数 <a class="header-anchor" href="#钩子参数" aria-label="Permalink to &quot;钩子参数&quot;">​</a></h4><p>el binding vnode preVnode</p><ul><li>el: 绑定到的DOM元素，可以操作, 其他均不可操作，如果要共享信息，可以在元素的dataset(data-开头)中实现</li><li>binding: 对象，vue2和vue3有区别 相同属性： <ul><li>value: 绑定的值</li><li>oldValue: 绑定的前一个值，只在<code>update\`\`componentUpdated</code> | <code>beforeUpdate\`\`updated</code>中可用</li><li>arg: 参数，可以是动态[arg] v-focus:foo -&gt; arg: foo</li><li>modifiers: 修饰符对象 v-focus.foo.bar -&gt; { foo: true, bar: true } 不同属性：vue2: name expression; vue3: instance dir</li><li>name: 指令名，不包括v-前缀</li><li>expression: 字符串形式的指令表达式 v-focus=&quot;name&quot; -&gt; name</li><li>instance: 使用指令的实例组件</li><li>dir: 指定的定义对象</li></ul></li><li>vnode: 当前虚拟节点</li><li>preVnode: 更新前的虚拟节点 参数只有一个，需要在修饰符前面声明，否则会被检测为修饰符</li></ul><h3 id="组件中使用" tabindex="-1">组件中使用 <a class="header-anchor" href="#组件中使用" aria-label="Permalink to &quot;组件中使用&quot;">​</a></h3><p>作用于组件的根节点，如果存在多个根节点，指令会被忽略并抛出警告</p><h3 id="常见自定义指令" tabindex="-1">常见自定义指令 <a class="header-anchor" href="#常见自定义指令" aria-label="Permalink to &quot;常见自定义指令&quot;">​</a></h3><p>v-highlight v-debounce v-throttle v-clickout</p>`,29),n=[t];function h(p,d,k,r,o,c){return a(),s("div",null,n)}const g=i(l,[["render",h]]);export{E as __pageData,g as default};
