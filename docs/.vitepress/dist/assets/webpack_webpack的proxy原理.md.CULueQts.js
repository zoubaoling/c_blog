import{_ as s,c as i,o as a,a3 as p}from"./chunks/framework.COm4hYgr.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack的proxy原理.md","filePath":"webpack/webpack的proxy原理.md","lastUpdated":1715657339000}'),n={name:"webpack/webpack的proxy原理.md"},e=p(`<h2 id="说说webpack-proxy工作原理-为什么能解决跨域" tabindex="-1">说说webpack proxy工作原理？为什么能解决跨域 <a class="header-anchor" href="#说说webpack-proxy工作原理-为什么能解决跨域" aria-label="Permalink to &quot;说说webpack proxy工作原理？为什么能解决跨域&quot;">​</a></h2><p>主要是webpack-dev-server提供的，基于http-proxy-middleware这个中间件，实现请求转发，只适用于开发阶段，提高效率</p><ol><li>开发阶段，webpack-dev-server会启动一个本地开发服务器，应用运行在localhost的一个端口上</li><li>本地发送请求时，本地服务器接受请求并根据devServer.prox中的配置将请求转发给指定的后端服务器</li><li>本地服务器接受后端服务器的响应，再转发给浏览器</li><li>服务器和服务器之间的通信不存在跨域行为，而浏览器和本地服务器二者同源，也不存在跨域行为</li></ol><p><strong>配置</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://api.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后端服务实际地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示是否更新代理后请求的 headers 中host地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pathRewrite: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重写路径，去掉匹配路径中的 \`/api\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        secure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 默认情况下不接收转发到https的服务器上，如果希望支持，可以设置为false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,5),t=[e];function l(h,k,r,E,d,c){return a(),i("div",null,t)}const y=s(n,[["render",l]]);export{g as __pageData,y as default};
