import{_ as e,c as a,o as i,a3 as l}from"./chunks/framework.COm4hYgr.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/如何封装可复用组件.md","filePath":"vue/如何封装可复用组件.md","lastUpdated":1715657339000}'),t={name:"vue/如何封装可复用组件.md"},o=l('<h2 id="如何封装一个组件" tabindex="-1">如何封装一个组件 <a class="header-anchor" href="#如何封装一个组件" aria-label="Permalink to &quot;如何封装一个组件&quot;">​</a></h2><h3 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-label="Permalink to &quot;原则&quot;">​</a></h3><ol><li>单一职责原则，尽量让组件原子化，一个组件做一件事情</li><li>可重用性，不要在内部编写业务代码，可以通过 props或者 插槽 来定制功能</li><li>封装性，组件内部状态不应直接由外部修改，可以通过props和事件来进行交互</li><li>易用性，提供详细的API文档说明</li><li>独立性，低耦合，不依赖于外部的特定库或框架</li><li>清晰的API设计，定义清晰的API，且遵循命名规范</li><li>可维护性，编码尽量易于维护，清晰、简介以及适当的注释</li><li>容器组件管数据，展示组件管视图</li><li>测试，确保功能按预期工作</li></ol><h3 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h3><ol><li>使用Vue.extend()创建一个组件</li><li>使用Vue.components()方法注册组件</li><li>如果子组件需要数据，可以在props中接收定义</li><li>子组件修改好数据，要把数据传递给父组件，可以用emit()方法</li></ol>',5),r=[o];function _(s,n,c,d,h,u){return i(),a("div",null,r)}const f=e(t,[["render",_]]);export{m as __pageData,f as default};
