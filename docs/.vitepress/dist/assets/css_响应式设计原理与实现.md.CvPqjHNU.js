import{_ as i,c as l,o as a,a3 as t}from"./chunks/framework.BmlUaO9n.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"css/响应式设计原理与实现.md","filePath":"css/响应式设计原理与实现.md","lastUpdated":1715052071000}'),s={name:"css/响应式设计原理与实现.md"},e=t(`<h2 id="什么是响应式设计-响应式设计的基本原理是什么-如何做" tabindex="-1">什么是响应式设计？响应式设计的基本原理是什么？如何做? <a class="header-anchor" href="#什么是响应式设计-响应式设计的基本原理是什么-如何做" aria-label="Permalink to &quot;什么是响应式设计？响应式设计的基本原理是什么？如何做?&quot;">​</a></h2><blockquote><p>网页的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的调整和响应</p></blockquote><p>常见特点：</p><ul><li>网站布局会根据视口调整模块的大小和位置</li><li>同时适配 PC + 平板 + 手机等</li><li>标签导航接近手持终端设备时修改为经典的抽屉式导航</li></ul><h3 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><blockquote><p>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须加上meta声明viewport</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- width=device-width: 适应手机屏幕尺寸宽度 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- maximum-scale=1: 缩放比例的最大值 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- initial-scale=1: 缩放比例的初始值 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- user-scalable=no: 用户的可以缩放的操作 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”&gt;</span></span></code></pre></div><p>实现的几种方式：媒体查询 百分比 vw/vh rem</p><ul><li>媒体查询: @media 像if条件表达式一样, 给不同分辨率大小的设备编写不同的样式 <ul><li>@media (min-width: 375px) and (max-width: 600px) {}</li><li>@media screen and (max-width: 1920px) {}</li><li>@media (orientation: portrait | landscape) {}</li><li>@media (device-width: 800px) {}: 设备宽高等雨设备物理像素宽高 device-height</li><li>@media (min-resolution: 150dpi) {} 设备像素密度</li></ul></li><li>百分比: 相对于父元素的大小。当浏览器宽度或高度变化时，百分比单位的元素会随之变化，从而实现响应效果 <ul><li>width/height依托于父元素的宽高，直接父元素没有指定，可能依托于更上层的内容</li><li>top/right/bottom/left相对于直接非static定位的父元素的宽/高，向上追溯</li><li>padding/margin所有方向值都相对于直接父元素的width，与父元素的height无关，向上追溯</li><li>border-radius: 相对于自身的宽度</li><li>每个属性的百分比计算规则不一样，实现起来会增加复杂性</li></ul></li><li>vw/vh: 相对于视口宽度/高度 <ul><li>视口宽高分成100等份,1vm/vw = 宽/高的1%</li></ul></li><li>rem: 相对于根元素html的font-size属性，浏览器默认font-size为16px <ul><li>可以结合媒体查询来对不同设备设置根元素字体大小</li><li>可以使用JS监听resize/orientationchange事件，动态设置根元素font-size为宽度的一定百分比: document.documentElement.clientWidth document.documentElement.style.fontSize</li></ul></li></ul><p>实现响应式，一般会考虑：</p><ul><li>弹性盒子和媒体查询技术</li><li>使用相对单位使内容自适应调节</li><li>选择断点，不同断点实现不同的布局和内容展示</li><li>使用百分比布局实现流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>优点：</p><ul><li>不同分辨率设备灵活性强</li><li>可以快捷解决多设备适应性问题</li></ul><p>缺点：</p><ul><li>兼容设备工作量大、效率低</li><li>代码累赘，会出现隐藏无用的元素</li><li>仅仅适用于布局、信息、框架不复杂的网站</li><li>只是一种折中方案，达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ul>`,16),n=[e];function h(p,d,o,r,c,u){return a(),l("div",null,n)}const _=i(s,[["render",h]]);export{m as __pageData,_ as default};
