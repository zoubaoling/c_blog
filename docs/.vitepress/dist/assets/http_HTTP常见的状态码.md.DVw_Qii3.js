import{_ as l,c as i,o as e,a3 as o}from"./chunks/framework.COm4hYgr.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"http/HTTP常见的状态码.md","filePath":"http/HTTP常见的状态码.md","lastUpdated":1715657339000}'),t={name:"http/HTTP常见的状态码.md"},a=o('<h2 id="说说http-常见的状态码有哪些-适用场景" tabindex="-1">说说HTTP 常见的状态码有哪些，适用场景？ <a class="header-anchor" href="#说说http-常见的状态码有哪些-适用场景" aria-label="Permalink to &quot;说说HTTP 常见的状态码有哪些，适用场景？&quot;">​</a></h2><h3 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h3><ul><li>1xx 表示请求正在处理</li><li>2xx 表示请求已经成功被服务器接收、理解并接受</li><li>3xx 表示重定向</li><li>4xx 表示请求错误</li><li>5xx 表示服务器错误</li></ul><h3 id="具体状态码" tabindex="-1">具体状态码 <a class="header-anchor" href="#具体状态码" aria-label="Permalink to &quot;具体状态码&quot;">​</a></h3><ol><li>1XX: 请求正在处理</li></ol><ul><li><code>100</code>（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li><li><code>101</code>：服务器根据客户端的请求切换协议，主要用于websocket或http2升级</li></ul><ol start="2"><li>2XX：请求已经成功被服务器接收、理解并接受,正常状态 200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</li></ol><ul><li><code>201</code>（已创建）：请求成功并且服务器创建了新的资源</li><li><code>202</code>（已创建）：服务器已经接收请求，但尚未处理</li><li>203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源</li><li><code>204</code>（无内容）：服务器成功处理请求，但没有返回任何内容</li><li><code>206</code>（部分内容）：服务器成功处理了部分请求-用于断点续传，或者视频文件等大文件的加载</li></ul><ol><li>3XXX: 重定向状态</li></ol><ul><li>300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</li><li><code>301</code>（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置-新域名替代旧域名</li><li><code>302</code>（临时移动）： 服务器目前从不同位置的网页响应请求，应继续使用原有位置来进行以后的请求-登录到首页自动重定向到其他页面；未登录自动重定向到登录页面；404页面重定向到首页</li><li>303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码；与302类似，但明确表示应采用GET，常作为PUT或POST的返回结果</li><li><code>304</code>：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li><li>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求;与302类似，但是明确规定客户端必须保持使用原始请求的方法进行重定向</li></ul><ol start="2"><li>4xx 表示请求错误</li></ol><ul><li><code>400</code>（错误请求）： 服务器不理解请求的语法</li><li><code>401</code>（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li><code>403</code>（禁止）： 服务器拒绝请求, 如在外网环境下，然后访问只有内网IP才能访问的时候则返回</li><li><code>404</code>（未找到）： 服务器找不到请求的资源</li><li>405（方法禁用）： 禁用请求中指定的方法</li><li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li><li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408（请求超时）： 服务器等候请求时发生超时</li></ul><ol start="3"><li>5xx 表示服务器错误</li></ol><ul><li><code>500</code>（服务器内部错误）：服务器遇到错误，无法完成请求</li><li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li><code>502</code>（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li><li><code>503</code>（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li><li><code>504</code>（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li></ul>',14),c=[a];function d(r,s,_,n,h,T){return e(),i("div",null,c)}const p=l(t,[["render",d]]);export{x as __pageData,p as default};
