import{_ as t,c as a,o as _,a3 as i}from"./chunks/framework.B7tteqv2.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/JavaScript中的原型，原型链分别是什么.md","filePath":"js/JavaScript中的原型，原型链分别是什么.md","lastUpdated":1714650100000}'),e={name:"js/JavaScript中的原型，原型链分别是什么.md"},l=i('<h2 id="javascript中的原型-原型链分别是什么" tabindex="-1">JavaScript中的原型，原型链分别是什么? <a class="header-anchor" href="#javascript中的原型-原型链分别是什么" aria-label="Permalink to &quot;JavaScript中的原型，原型链分别是什么?&quot;">​</a></h2><p>原型就是一个普通对象，它是为构造函数的实例共享属性和方法；所有实例中引用的原型都是同一个对象</p><ul><li>构造函数有prototype属性，即原型，属性和方法可以挂载在原型上</li><li>prototype上有一个constructor属性，指向构造函数本身</li><li>实例对象拥有__proto__属性，可以理解为指针，指向了构造函数的原型（prototype）</li></ul><ol><li>当访问一个对象的属性时，会现在对象本身查找</li><li>如果没有，会通过实例对象的__proto__找到其构造函数的原型，在其构造函数的原型上找</li><li>如果找不到，依此往上在原型对象中查找</li><li>直到找到匹配的属性或者原型链顶层，也就是Object的原型null</li><li>这种关系就称为原型链</li></ol><ul><li>一切对象都是继承自Object对象，Object.prototype为null</li><li>一切函数对象，都是继承自Function对象</li></ul>',5),o=[l];function r(c,p,s,n,d,u){return _(),a("div",null,o)}const m=t(e,[["render",r]]);export{S as __pageData,m as default};
