import{_ as a,c as t,o as e,a3 as i}from"./chunks/framework.B7tteqv2.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/JS中执行上下文和执行栈.md","filePath":"js/JS中执行上下文和执行栈.md","lastUpdated":1714650100000}'),l={name:"js/JS中执行上下文和执行栈.md"},r=i('<h2 id="javascript中执行上下文和执行栈是什么" tabindex="-1">JavaScript中执行上下文和执行栈是什么？ <a class="header-anchor" href="#javascript中执行上下文和执行栈是什么" aria-label="Permalink to &quot;JavaScript中执行上下文和执行栈是什么？&quot;">​</a></h2><h3 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h3><p>执行上下文是代码的运行环境，只要代码运行，就一定在执行上下文中，一共有三种执行上下文：</p><ul><li>全局执行上下文(global execution context)，只有一个，浏览器的全局对象就是window对象，this指向这个全局对象.全局上下文里的变量能被其他任何上下文访问</li><li>函数执行上下文(execution context)，有无数个，只有函数被调用时才会被创建，每次函数执行时都会创建一个新的函数执行上下文，会创建一个新的私有作用域，函数内声明的变量只能在当前作用域内访问</li><li>eval函数执行上下文,指的是运行在eval函数中的代码，很少也不建议用</li></ul><h4 id="执行上下文的生命周期" tabindex="-1">执行上下文的生命周期 <a class="header-anchor" href="#执行上下文的生命周期" aria-label="Permalink to &quot;执行上下文的生命周期&quot;">​</a></h4><ul><li>创建阶段</li><li>执行阶段</li><li>回收阶段</li></ul><p><strong>创建阶段</strong> 函数被调用，但是函数内代码执行之前</p><ol><li>确定this的值，This Binding，this的值在执行的时候才能确认，定义的时候不能确认</li><li>创建变量对象VO，包括函数的参数、函数声明、变量声明等</li><li>创建作用域链，解析变量的值，由当前执行上下文的变量对象和所有外部环境的作用域链组成</li></ol><ul><li>全局环境：没有外部环境的环境，外部环境引用为null，有一个全局对象，this值指向这个全局对象</li><li>函数环境：函数中自定义的变量存储在<em>环境记录</em>中，包含了arguments, 外部函数的引用可以是全局环境，也可以是包含内部函数的外部函数环境</li></ul><p><strong>执行阶段</strong> 变量赋值，代码执行</p><p><strong>回收阶段</strong> 执行上下文出栈等待回收</p><h4 id="执行栈" tabindex="-1">执行栈 <a class="header-anchor" href="#执行栈" aria-label="Permalink to &quot;执行栈&quot;">​</a></h4><p>执行栈也称调用栈，有后进先出的结构，存储代码执行期间的所有执行上下文</p><ol><li>当JS引擎执行第一行代码的时候，会创建一个全局上下文并入栈</li><li>每碰到一个函数时，会创建一个函数上下文，并压入到执行栈中</li><li>引擎会执行栈顶的执行上下文（一般是函数执行上下文），当该函数执行完，将对应的上下文弹出栈，然后流程到达下一个执行上下文 <a href="https://vue3js.cn/interview/JavaScript/context_stack.html#%E4%BA%8C%E3%80%81%E6%89%A7%E8%A1%8C%E6%A0%88" target="_blank" rel="noreferrer">解析</a></li></ol>',14),o=[r];function n(s,c,_,h,d,p){return e(),t("div",null,o)}const f=a(l,[["render",n]]);export{m as __pageData,f as default};
