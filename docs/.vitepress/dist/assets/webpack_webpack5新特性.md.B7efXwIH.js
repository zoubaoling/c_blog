import{_ as e,c as a,o as i,a5 as t}from"./chunks/framework.B102yH4G.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack5新特性.md","filePath":"webpack/webpack5新特性.md","lastUpdated":1715947066000}'),c={name:"webpack/webpack5新特性.md"},l=t('<h2 id="webpack-5-的主要升级点有哪些" tabindex="-1">webpack 5 的主要升级点有哪些？ <a class="header-anchor" href="#webpack-5-的主要升级点有哪些" aria-label="Permalink to &quot;webpack 5 的主要升级点有哪些？&quot;">​</a></h2><ol><li>支持ES6模块动态导入（Dynamic Import）: Webpack 5对动态导入语法（import()）提供了更好的支持，可以更轻松地进行代码分割</li><li>内置代码分割优化（optimization.splitChunks）： Webpack 5通过optimization.splitChunks进行了重新设计，提供了更灵活的配置选项，使得代码分割更为强大和易用</li><li>Tree-shaking改进：Webpack 5对Tree-shaking进行了改进，提供了更好的代码优化，以便删除未使用的代码；还支持了CommonJS的树摇，但是有一些限制</li><li>模块联邦（Module Federation）：这是Webpack 5中的一项重大功能，允许将多个独立的Webpack构建连接在一起，实现模块共享，从而更好地支持微服务架构</li><li>默认配置优化: Webpack 5 默认配置中的一些优化，使得开箱即用的性能更好。</li><li>提高构建性能: Webpack 5引入了一些性能优化，包括更快的持久化缓存、更快的构建速度等。</li><li>移除废弃特性: 作为更新，Webpack 5移除了一些过时的特性和API，因此在升级时需要注意潜在的破坏性变化。</li><li>支持 WebAssembly（WASM）: Webpack 5 对 WebAssembly 提供了原生的支持，使得在项目中使用 WebAssembly 更加方便。</li><li>持久缓存（Persistent Caching）: Webpack 5引入了更好的持久缓存机制，利用了更稳定的HashedModuleIdsPlugin和NamedChunksPlugin，以改善构建性能。</li><li>缓存组（Caching Groups）: 新的缓存组概念被引入，可以更细粒度地控制模块的缓存策略</li></ol>',2),s=[l];function o(p,n,r,_,b,k){return i(),a("div",null,s)}const h=e(c,[["render",o]]);export{m as __pageData,h as default};
