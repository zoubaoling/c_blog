import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.B7tteqv2.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue路由拦截如何实现.md","filePath":"vue/vue路由拦截如何实现.md","lastUpdated":1715657339000}'),e={name:"vue/vue路由拦截如何实现.md"},t=n(`<h2 id="路由拦截是怎么实现的" tabindex="-1">路由拦截是怎么实现的？ <a class="header-anchor" href="#路由拦截是怎么实现的" aria-label="Permalink to &quot;路由拦截是怎么实现的？&quot;">​</a></h2><ol><li>路由拦截 axios拦截</li><li>需要在路由配置中添加一个字段，它是用于判断路由是否需要拦截</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:Index,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     requirtAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(to.meta.requirtAuth){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( store.satte.token ){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="导航守卫" tabindex="-1">导航守卫 <a class="header-anchor" href="#导航守卫" aria-label="Permalink to &quot;导航守卫&quot;">​</a></h3><ol><li>全局守卫: router.beforeEach(to, from, next) beforeResolve(to, from, next) afterEach(to, from)--路由实例上操作</li></ol><ul><li>beforeEach: 全局前置守卫，路由正式进入前执行，可以决定是否完成或取消导航--单个路由配置</li><li>beforeResolve: 全局解析守卫, 导航确认前，同时在所有组件内守卫和异步路由组件解析后执行</li><li>afterEach: 全局后置钩子, 不会改变导航本身，但可用于访问控制之后的逻辑处理</li></ul><ol start="2"><li>路由独享守卫(routes配置中与path同级的属性): beforeEnter(to,from, next)</li></ol><ul><li>beforeEnter: 路由独享守卫, 可用于控制特定路由的访问权限</li></ul><ol start="3"><li>组件内守卫（钩子函数）: beforeRouteEnter beforeRouteUpdate beforeRouteLeave</li></ol><ul><li>beforeRouteEnter: 无法获取this实例，此时组件实例还没被创建</li><li>beforeRouteUpdate: 当前路由改变，但是该组件被复用时调用</li><li>beforeRouteLeave: 导航离开该组件的对应路由时调用，可以访问组件实例 this</li></ul>`,10),l=[t];function h(p,k,E,r,o,d){return a(),i("div",null,l)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
