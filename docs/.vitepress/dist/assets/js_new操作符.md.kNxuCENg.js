import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.B102yH4G.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/new操作符.md","filePath":"js/new操作符.md","lastUpdated":1715864760000}'),e={name:"js/new操作符.md"},n=t(`<h2 id="说说new操作符具体干了什么" tabindex="-1">说说new操作符具体干了什么 <a class="header-anchor" href="#说说new操作符具体干了什么" aria-label="Permalink to &quot;说说new操作符具体干了什么&quot;">​</a></h2><ol><li>先创建一个空对象</li><li>把空对象和构造函数通过原型链进行链接</li><li>把构造函数的this绑定为新的空对象身上</li><li>执行构造函数并根据构建函数返回的类型判断 <ul><li>如果是值类型，则返回新创建的对象</li><li>如果是引用类型，就要返回这个引用类型</li></ul></li></ol><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // const obj = Object.create(func.prototype)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Object.setPrototypeOf(func.prototype)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, args)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="new-fn和new-fn" tabindex="-1">new fn和new fn() <a class="header-anchor" href="#new-fn和new-fn" aria-label="Permalink to &quot;new fn和new fn()&quot;">​</a></h3><ul><li>new fn和new fn()功能上是等价的</li><li><code>new fn().prop</code>和<code>new fn.key</code>不等价，前者正常，后者报错，先执行fn.key,再执行new</li></ul><h3 id="new与箭头函数" tabindex="-1">new与箭头函数 <a class="header-anchor" href="#new与箭头函数" aria-label="Permalink to &quot;new与箭头函数&quot;">​</a></h3><ul><li>不可修改箭头函数的this指向</li><li>箭头函数不能用new，会报错</li><li>箭头函数没有原型，内部无法绑定，且箭头函数没有this</li></ul><h3 id="new与object-create" tabindex="-1">new与Object.create <a class="header-anchor" href="#new与object-create" aria-label="Permalink to &quot;new与Object.create&quot;">​</a></h3><p>都用于创建对象</p><table><thead><tr><th></th><th>new</th><th>Object.create</th></tr></thead><tbody><tr><td>构造函数</td><td>保留构造函数属性</td><td>丢失原构造函数属性</td></tr><tr><td>原型链</td><td>构造函数的prototype</td><td>原构造函数/对象本身</td></tr><tr><td>作用对象</td><td>构造函数</td><td>构造函数和对象</td></tr></tbody></table><p>Object.create一般主要接受对象</p><h3 id="new-target" tabindex="-1">new.target <a class="header-anchor" href="#new-target" aria-label="Permalink to &quot;new.target&quot;">​</a></h3><p>检测函数是否通过new调用的</p><ul><li>普通函数调用时返回undefined</li><li>作为new调用时，返回构造函数的引用</li></ul><h3 id="确保函数被new调用-而不能普通调用" tabindex="-1">确保函数被new调用，而不能普通调用 <a class="header-anchor" href="#确保函数被new调用-而不能普通调用" aria-label="Permalink to &quot;确保函数被new调用，而不能普通调用&quot;">​</a></h3><ul><li>this instanceof Constructor: true是此方法是构造函数实例，即是new调用;false可以抛出错误</li><li>new.target</li><li>es6 class</li></ul>`,17),l=[n];function h(r,p,k,d,o,c){return a(),i("div",null,l)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
