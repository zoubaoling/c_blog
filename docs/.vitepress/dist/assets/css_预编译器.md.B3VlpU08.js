import{_ as s,c as e,o as a,a5 as o}from"./chunks/framework.B102yH4G.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"css/预编译器.md","filePath":"css/预编译器.md","lastUpdated":1715839678000}'),c={name:"css/预编译器.md"},l=o('<h2 id="说说对css预编语言的理解-有哪些区别" tabindex="-1">说说对css预编语言的理解？有哪些区别 <a class="header-anchor" href="#说说对css预编语言的理解-有哪些区别" aria-label="Permalink to &quot;说说对css预编语言的理解？有哪些区别&quot;">​</a></h2><blockquote><p>sass less stylus</p></blockquote><p>直接书写CSS，不方便维护及扩展，也不利于复用，预处理器就解决了这些问题</p><p>预处理语言增加了<code>变量、函数、混入</code>等的功能，使css更方便维护，本质上是css的超集</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><ol><li>sass可以省略大括号</li><li>都可以支持嵌套，父级选择器标记也都是 &amp;</li><li>变量声明：<code>less: @red: &#39;red&#39;</code>; <code>sass: $red: &#39;red&#39;</code></li><li>混入: <ol><li>less: class中引入另一个class --&gt; <code>.class { color: &#39;red&#39;, .classA(), .classB }</code></li><li>sass: 声明 -&gt; <code>@mixin .overflow {}</code>; @include使用 -&gt; <code>.class { @include .overflow }</code></li></ol></li></ol>',6),t=[l];function d(i,r,_,n,p,h){return a(),e("div",null,t)}const f=s(c,[["render",d]]);export{m as __pageData,f as default};
