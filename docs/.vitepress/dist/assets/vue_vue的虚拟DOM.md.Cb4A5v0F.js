import{_ as e,c as a,o as t,a5 as o}from"./chunks/framework.B102yH4G.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue的虚拟DOM.md","filePath":"vue/vue的虚拟DOM.md","lastUpdated":1715938250000}'),r={name:"vue/vue的虚拟DOM.md"},d=o('<h2 id="vue的虚拟dom" tabindex="-1">Vue的虚拟DOM <a class="header-anchor" href="#vue的虚拟dom" aria-label="Permalink to &quot;Vue的虚拟DOM&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>用一个JS对象描述DOM节点，对象内容和DOM内容一一对应，包括标签名、属性、子元素等，这个JS对象就是真实DOM的虚拟DOM节点</p><h3 id="为什么要有虚拟dom" tabindex="-1">为什么要有虚拟DOM <a class="header-anchor" href="#为什么要有虚拟dom" aria-label="Permalink to &quot;为什么要有虚拟DOM&quot;">​</a></h3><p>一个真实的DOM是非常庞大的，操作真实DOM来更新视图消耗比较大</p><p>使用一个JS对象表示DOM，通过计算比对前后的变动，只修改需要变动的DOM，减少真实DOM的操作消耗，提高渲染性能和开发效率</p><p>由于本质上是一个JS抽象对象，可以跨平台支持</p><h3 id="vnode类" tabindex="-1">VNode类 <a class="header-anchor" href="#vnode类" aria-label="Permalink to &quot;VNode类&quot;">​</a></h3><p>通过VNode类实例不同类型节点的虚拟节点，包括tag data children等属性</p>',9),n=[d];function i(s,_,c,h,l,u){return t(),a("div",null,n)}const O=e(r,[["render",i]]);export{D as __pageData,O as default};
