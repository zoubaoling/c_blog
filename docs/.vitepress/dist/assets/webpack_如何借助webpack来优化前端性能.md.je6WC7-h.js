import{_ as e,c as i,o as l,a3 as a,l as t}from"./chunks/framework.B7tteqv2.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/如何借助webpack来优化前端性能.md","filePath":"webpack/如何借助webpack来优化前端性能.md","lastUpdated":1715657339000}'),s={name:"webpack/如何借助webpack来优化前端性能.md"},c=a('<h2 id="说说如何借助webpack来优化前端性能" tabindex="-1">说说如何借助webpack来优化前端性能？ <a class="header-anchor" href="#说说如何借助webpack来优化前端性能" aria-label="Permalink to &quot;说说如何借助webpack来优化前端性能？&quot;">​</a></h2><ol><li>tree-shaking: mode: production开启,使用ES6模块语法，打包时删除未引用的代码，减少最终bundle的大小</li><li>减少解析成本: resolve.alias resolve.extensions</li><li>使用CDN加速，配置externals来设置为外部依赖，利用CDN的缓存和速度</li><li>代码分割: 将代码分离到不同的bundle中，然后按需加载或者并行加载，提高代码的加载性能----已默认支持splitChunksPlugins插件，只需配置optimization.splitChunks</li></ol><ul><li>chunks: &#39;all|async｜initial&#39;，默认支持异步，动态导入import()的模块分割成独立的chunk，需要的时候才加载</li><li>minChunks: number被引入的次数，默认是1，大于指定次数会被分割成独立的chunk</li><li>minSize｜maxSize拆分包的限制，超出限制不会拆分</li></ul><ol start="5"><li>图片压缩</li></ol><ul><li>image-webpack-loader</li></ul><ol start="6"><li>css代码压缩: css-minimizer-webpack-plugin(vue-cli内置),基于postcss，优化和压缩Css文件，比如去除空白符和注释、优化CSS语法</li><li>JS代码压缩: TerserWebpackPlugin(vue-cli内置)，生产模式下去除无用代码、压缩变量名、删除死代码和注释等</li><li>html代码压缩: HtmlWebpackPlugin(vue-cli内置)，生成HTML时可选压缩项，压缩空白字符、删除注释</li></ol>',6),n=t("p",{"minimize:":"","true,":"","minimizer:":"","[]":""},"代码压缩如果要自定义添加配置在optimization:",-1),o=[c,n];function r(_,p,u,m,d,k){return l(),i("div",null,o)}const w=e(s,[["render",r]]);export{h as __pageData,w as default};
