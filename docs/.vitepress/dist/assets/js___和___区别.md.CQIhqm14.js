import{_ as i,c as s,o as a,a3 as e}from"./chunks/framework.BmlUaO9n.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"js/==和===区别.md","filePath":"js/==和===区别.md","lastUpdated":1714650100000}'),l={name:"js/==和===区别.md"},n=e(`<h2 id="、-、object-is" tabindex="-1">==、===、Object.is <a class="header-anchor" href="#、-、object-is" aria-label="Permalink to &quot;==、===、Object.is&quot;">​</a></h2><ul><li>==等于操作符, 两边类型不一致时，会先进行类型转换，在进行比较</li><li>=== 全等操作符，两边类型不一致时，不会进行类型转换，直接返回false</li><li>Object.is，结果基本和全等操作符一致，除了几种特殊情况。+0和-0不相等，两个NaN相等</li></ul><h3 id="" tabindex="-1">== <a class="header-anchor" href="#" aria-label="Permalink to &quot;==&quot;">​</a></h3><ol><li>两个都是简单类型，字符串和布尔值都会转为数值，再比较</li><li>简单类型和引用类型比较，对象会先转为原始类型(对象是valueOf, 数组会join(&#39;,&#39;),函数toString)的值，再比较</li><li>两个都是引用类型，比较指针是否相同</li><li>null == undefined</li><li>存在NaN为false</li></ol><p><em>toPrimitive:先调用obj.valueOf，如果是原始值，返回结果，否则计算obj.toString()，是原始值返回结果，否则抛出异常</em> Date比较特殊，先toString,再valueOf</p><blockquote><p>valueOf得到对象的特征值-只有Date和Number返回数字，否则返回自身，toString得到对象的文字描述-字符串</p></blockquote><h3 id="-1" tabindex="-1">=== <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;===&quot;">​</a></h3><ol><li>不会进行类型转换，类型一旦不同，立马返回false</li><li>null === null true</li><li>undefined === undefined true</li><li>null === undefined false</li></ol><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>使用null和undefined的时候，一般用==，其他情况建议全等</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj.name === undefined &gt; undefined == null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://fe.ecool.fun/topic/be6f7f8b-d386-4f99-a0bc-f9b5a0512f99?orderBy=updateTime&amp;order=desc&amp;titleKey=%3D%3D" target="_blank" rel="noreferrer">原理解析</a></p>`,12),t=[n];function h(p,r,d,o,k,c){return a(),s("div",null,t)}const _=i(l,[["render",h]]);export{f as __pageData,_ as default};
