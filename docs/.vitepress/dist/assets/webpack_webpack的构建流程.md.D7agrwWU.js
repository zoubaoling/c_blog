import{_ as e,c as a,o as l,a3 as t}from"./chunks/framework.COm4hYgr.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack的构建流程.md","filePath":"webpack/webpack的构建流程.md","lastUpdated":1715657339000}'),o={name:"webpack/webpack的构建流程.md"},p=t(`<h2 id="说说webpack的构建流程" tabindex="-1">说说webpack的构建流程 <a class="header-anchor" href="#说说webpack的构建流程" aria-label="Permalink to &quot;说说webpack的构建流程&quot;">​</a></h2><p>Webpack 是一个现代 JavaScript 应用程序的静态模块打包器，它通过一个依赖图来打包应用程序中的所有模块 <strong>构建流程</strong> 从入口开始，解析各个模块，处理转换内容，再到最后输出文件的复杂过程</p><ol><li>初始化</li></ol><ul><li>从配置文件和 Shell 语句中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数</li></ul><ol start="2"><li>编译</li></ol><ul><li>创建一个新的Compile对象，包含了webpack所有可配置功能的设置(options loaders plugins)等，触发environment 和 apply 事件钩子</li><li>根据配置文件，从入口Entry出发，对每个Module使用相应的loader进行转换/翻译文件内容, 再找到该Module依赖的Module，递归的进行编译处理，这个过程中会构建依赖关系图</li></ul><ol start="3"><li>输出</li></ol><ul><li><p>编译后的Module会组合成Chunks，如果存在代码分割，也会确定哪些模块生成哪些Chunks</p></li><li><p>把chunks转换成文件，并输出到配置中output指定的路径和文件名</p></li><li><p>构建完成，触发done钩子</p><pre><code>如果一个被多个文件引用，打包时只会生成一个文件
如果引用的文件没有调用，不会打包，如果引入的变量和方法没有调用也不会打包
对于多个入口文件，加入引入了相同的代码，可以用插件把他抽离到公共文件中
</code></pre></li></ul>`,8),i=[p];function c(n,r,s,_,d,u){return l(),a("div",null,i)}const h=e(o,[["render",c]]);export{b as __pageData,h as default};
